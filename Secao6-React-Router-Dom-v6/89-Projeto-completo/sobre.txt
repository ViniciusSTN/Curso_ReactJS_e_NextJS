npm i react-router-dom

params agora por padrão é um objeto vazio e não undefined como era no react-router-dom v5

agora Routes organiza por especifidade de url, não é mais necessário colocar na ordem 'certa' os Route

hooks:
useParams()
useSearchParams()  -> query string


O ponto de interrogação na URL é usado para indicar o início da query string (cadeia de consulta). A query string é uma parte da URL que permite passar parâmetros ou informações adicionais para o servidor web ao qual a solicitação está sendo feita.


-> testar: http://localhost:3000/posts/10?page=100

const [qs, setQs] = useSearchParams();

é possivel usar get em qs e informar qual a query string, será retornado o valor
nesse caso retorna 100
Post | {`Param: ${id}`} | {`Query string: ${qs.get('page')}`}

Nesse caso retora a query string inteira
Post | {`Param: ${id}`} | {`Query string: ${qs}`}


é possivel passar várias query strings
-> testar: http://localhost:3000/posts/10?page=100&segundo=valor



useHistory não existe mais, agora é:
navigate = useNavigate()
navigate('/');



É possivel aninhar rotas (colcoar uma dentro da outra)
exemplo:

antes:
<Route path={'/posts/:id'} element={<Posts />} />
<Route path={'/posts'} element={<Posts />} />

depois:
<Route path={'/posts'} element={<Posts />}>
  <Route path=":id" element={<Post />} />
</Route>

OBS: é preciso adicionar <Outlet /> dentro de Posts




// navigate pode receber um objeto
// exemplo: replace -> troca o link ao invés de fazer um push, util para quando o usuario clicar em voltar não cair na página que o redirecionou

navigate('/', {
  state: `This is the state: ${Math.random()}`,
});

para receber esse estado (dentro da home):
const location = useLocation();
const { state } = location;


é possivel passar também o estado dentro do link (olhar código do Menu)

OBS: é melhor usar redux para gerenciar o estado
